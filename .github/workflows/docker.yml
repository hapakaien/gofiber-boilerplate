name: Publish

on:
  push:
    branches: [ main ]
    tags:
      - v*
  pull_request:
    branches: [ main ]

jobs:
  publish:
    name: Publish to registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env:
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ github.repository }}
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Build image
        run: |
            docker build . --file Dockerfile --tag $IMAGE_NAME --label org.opencontainers.image.title="${{ fromJson(steps.repo.outputs.result).name }}" \
            --label org.opencontainers.image.description="${{ fromJson(steps.repo.outputs.result).description }}" \
            --label org.opencontainers.image.url="${{ fromJson(steps.repo.outputs.result).html_url }}" \
            --label org.opencontainers.image.source="${{ fromJson(steps.repo.outputs.result).html_url }}" \
            --label org.opencontainers.image.version="${{ steps.prep.outputs.version }}" \
            --label org.opencontainers.image.created="${{ steps.prep.outputs.created }}" \
            --label org.opencontainers.image.revision="${{ github.sha }}" \
            --label org.opencontainers.image.licenses="${{ fromJson(steps.repo.outputs.result).license.spdx_id }}"
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
