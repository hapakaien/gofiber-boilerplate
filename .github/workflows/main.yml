name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.label }} - ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        go: ['1.14', '1.15', '1.16']
        include:
          - os: macos-latest
            label: 'Mac'
          - os: ubuntu-latest
            label: 'Linux'
          - os: windows-latest
            label: 'Windows'

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up Go v${{ matrix.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Cache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache (Mac)
        if: runner.os == 'macOS'
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache (Windiows)
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: go build -v ./...

      - name: Run tests
        run: go test -v ./...

  publish:
    name: Publish container image
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: OCI image meta
        id: meta
        uses: docker/metadata-action@v3.3.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=edge,branch=main
            type=ref,event=branch
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    needs: publish
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    env:
      PORT: ${{ secrets.PORT }}
      CORS_DOMAIN: ${{ secrets.CORS_DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Heroku
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ github.event.repository.name }}
          dockerfile_directory: ./
